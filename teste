# main.py 

import streamlit as st
import io
import logging
import altair as alt
from pandas import DataFrame
from scraper import criar_driver, raspar_livros, rating_para_numero

# Configura√ß√£o de log: exibe no terminal
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def converter_csv(df: DataFrame) -> bytes:
    logging.info("Convertendo DataFrame para CSV.")
    buffer = io.StringIO()
    df.to_csv(buffer, index=False, encoding="utf-8-sig", sep=";")
    return buffer.getvalue().encode("utf-8-sig")


def main() -> None:
    logging.info("Aplica√ß√£o iniciada.")
    st.set_page_config(page_title="üìò Books Scraper", layout="wide")
    st.title("üìò Books ‚Äî Raspagem com Selenium")

    # Bot√£o completo
    if st.button("üöÄ Iniciar raspagem"):
        logging.info("Bot√£o 'Iniciar raspagem' clicado.")
        with st.spinner("Raspando livros, aguarde..."):
            driver = criar_driver()
            df = raspar_livros(driver)
            driver.quit()
            st.session_state.df = df
        st.success(f"üìö {len(df)} livros coletados!")

    # Bot√£o de teste
    if st.button("üß™ Testar com 20 livros"):
        logging.info("Bot√£o de teste com 20 livros clicado.")
        with st.spinner("Raspando apenas 20 livros para teste..."):
            driver = criar_driver()
            df = raspar_livros(driver, limite=20)
            driver.quit()
            st.session_state.df = df
        st.success(f"‚úÖ {len(df)} livros coletados para teste.")

    if "df" in st.session_state:
        df: DataFrame = st.session_state.df
        filtro: str = st.text_input("üîé Filtrar por t√≠tulo")
        if filtro:
            logging.info(f"Filtro aplicado: {filtro}")
            df = df[df["Title"].str.contains(filtro, case=False, na=False)]

        # Convers√µes para an√°lise
        df["Rating Num"] = df["Rating"].apply(rating_para_numero)
        df["Pre√ßo"] = df["Price (incl. tax)"].str.replace("¬£", "").astype(float)

        st.dataframe(df, use_container_width=True)
        csv = converter_csv(df)
        st.download_button("üì• Baixar CSV", csv, "livros.csv", "text/csv")

        with st.expander("üìä An√°lise: Avalia√ß√£o vs. Pre√ßo"):
            st.write("Top 10 livros com maior avalia√ß√£o e pre√ßo:")
            top_livros = df.sort_values(by=["Rating Num", "Pre√ßo"], ascending=[False, False]).head(10)
            st.dataframe(top_livros[["Title", "Rating Num", "Pre√ßo"]])

            st.write("Gr√°fico de dispers√£o (Rating x Pre√ßo):")
            chart = alt.Chart(df).mark_circle(size=60).encode(
                x='Rating Num',
                y='Pre√ßo',
                tooltip=['Title', 'Rating Num', 'Pre√ßo']
            ).interactive()
            st.altair_chart(chart, use_container_width=True)


if __name__ == "__main__":
    main()


# scraper.py

from typing import Optional
import pandas as pd
import logging
from selenium.webdriver.chrome.webdriver import WebDriver

# Configura√ß√£o de log para arquivo
logging.basicConfig(
    filename="books_scraper.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filemode="a",
    encoding="utf-8"
)

def criar_driver() -> WebDriver:
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from webdriver_manager.chrome import ChromeDriverManager

    options = Options()
    options.add_argument("--headless")
    options.add_argument("--log-level=3")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    logging.info("Driver Chrome criado com sucesso.")
    return driver


def raspar_livros(driver: WebDriver, base_url: Optional[str] = "http://books.toscrape.com/", limite: Optional[int] = None) -> pd.DataFrame:
    import time
    from selenium.webdriver.common.by import By

    driver.get(base_url)
    time.sleep(1)
    livros = []
    livro_count = 0

    while True:
        links = driver.find_elements(By.CSS_SELECTOR, "h3 a")
        total_links = len(links)
        logging.info(f"Iniciando nova p√°gina com {total_links} livros.")

        for i in range(total_links):
            links = driver.find_elements(By.CSS_SELECTOR, "h3 a")
            link = links[i]
            url = link.get_attribute("href")
            link.click()
            time.sleep(0.3)

            livro_count += 1
            logging.info(f"Lendo livro {livro_count}: {url}")

            try:
                dados = {
                    "Title": driver.find_element(By.CSS_SELECTOR, "h1").text,
                    "UPC": driver.find_element(By.XPATH, '//th[contains(text(), "UPC")]/following-sibling::td').text,
                    "Product Type": driver.find_element(By.XPATH, '//th[contains(text(), "Product Type")]/following-sibling::td').text,
                    "Price (excl. tax)": driver.find_element(By.XPATH, '//th[contains(text(), "Price (excl. tax)")]/following-sibling::td').text,
                    "Price (incl. tax)": driver.find_element(By.XPATH, '//th[contains(text(), "Price (incl. tax)")]/following-sibling::td').text,
                    "Tax": driver.find_element(By.XPATH, '//th[contains(text(), "Tax")]/following-sibling::td').text,
                    "Availability": driver.find_element(By.XPATH, '//th[contains(text(), "Availability")]/following-sibling::td').text,
                    "Number of reviews": driver.find_element(By.XPATH, '//th[contains(text(), "Number of reviews")]/following-sibling::td').text,
                    "Rating": driver.find_element(By.CSS_SELECTOR, "p.star-rating").get_attribute("class").split(" ")[1],
                    "URL": url,
                }
                livros.append(dados)
                logging.info(f"Livro coletado com sucesso: {dados['Title']}")
            except Exception as e:
                logging.error(f"Erro ao coletar dados do livro: {url} ‚Äî {e}")

            if limite and len(livros) >= limite:
                logging.info(f"Limite de {limite} livros atingido.")
                return pd.DataFrame(livros)

            driver.back()
            time.sleep(0.3)

        try:
            driver.find_element(By.CSS_SELECTOR, "li.next a").click()
            time.sleep(1)
        except Exception:
            logging.info("Fim das p√°ginas. Raspagem conclu√≠da.")
            break

    logging.info(f"Total de livros raspados: {livro_count}")
    return pd.DataFrame(livros)


def rating_para_numero(rating_str: str) -> int:
    """
    Converte uma string de avalia√ß√£o ('One', 'Two', etc.) para um n√∫mero inteiro.
    """
    mapa = {
        "One": 1,
        "Two": 2,
        "Three": 3,
        "Four": 4,
        "Five": 5
    }
    return mapa.get(rating_str, 0)
